<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Gemini\Client;
use Gemini\Transporters\HttpTransporter;
use GuzzleHttp\Client as GuzzleClient;
use Psr\Http\Client\ClientInterface;
use Closure;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Log;

class SerpApiController extends Controller
{
    public function search(Request $request)
    {
        $query = $request->input('q', 'Tin t·ª©c m·ªõi nh·∫•t');
        $page = $request->input('page', 1);
        $perPage = 10;

        $apiKey = env('GOOGLE_API_KEY', 'AIzaSyANBGy9NsRYiX9THqHiWDgOsqbX1H34zPM');
        $cx = env('GOOGLE_CX', '402b811b68dfb4029');

        if (!$apiKey || !$cx) {
            Log::error('GOOGLE_API_KEY or GOOGLE_CX is not set in .env file.');
            return response()->json(['error' => 'GOOGLE_API_KEY or GOOGLE_CX is not set. Please configure your .env file.'], 500);
        }

        $start = ($page - 1) * $perPage + 1;

        $response = Http::get('https://www.googleapis.com/customsearch/v1', [
            'key' => $apiKey,
            'cx' => $cx,
            'q' => $query,
            'hl' => 'vi',
            'gl' => 'vn',
            'start' => $start,
            'num' => $perPage,
        ]);

        if ($response->failed()) {
            Log::error('Google Custom Search API request failed: ' . $response->status() . ' - ' . $response->body());
            return response()->json(['error' => 'Google Custom Search API request failed.', 'status' => $response->status(), 'body' => $response->body()], $response->status());
        }

        $results = $response->json()['items'] ?? [];
        $totalResults = min((int)($response->json()['searchInformation']['totalResults'] ?? 0), 100);

        $platforms = [
            'youtube.com' => ['name' => 'YouTube', 'icon' => 'fab fa-youtube', 'color' => 'text-red-600'],
            'facebook.com' => ['name' => 'Facebook', 'icon' => 'fab fa-facebook', 'color' => 'text-blue-600'],
            'wikipedia.org' => ['name' => 'Wikipedia', 'icon' => 'fab fa-wikipedia-w', 'color' => 'text-gray-600'],
            'twitter.com' => ['name' => 'X', 'icon' => 'fab fa-x-twitter', 'color' => 'text-black'],
            'x.com' => ['name' => 'X', 'icon' => 'fab fa-x-twitter', 'color' => 'text-black'],
            'instagram.com' => ['name' => 'Instagram', 'icon' => 'fab fa-instagram', 'color' => 'text-pink-600'],
            'linkedin.com' => ['name' => 'LinkedIn', 'icon' => 'fab fa-linkedin', 'color' => 'text-blue-700'],
            'tiktok.com' => ['name' => 'TikTok', 'icon' => 'fab fa-tiktok', 'color' => 'text-teal-500'],
            'pinterest.com' => ['name' => 'Pinterest', 'icon' => 'fab fa-pinterest', 'color' => 'text-red-700'],
            'reddit.com' => ['name' => 'Reddit', 'icon' => 'fab fa-reddit', 'color' => 'text-orange-600'],
            'vnexpress.net' => ['name' => 'VNExpress', 'icon' => 'fas fa-newspaper', 'color' => 'text-blue-500'],
            'tuoitre.vn' => ['name' => 'Tu·ªïi Tr·∫ª', 'icon' => 'fas fa-newspaper', 'color' => 'text-red-500'],
            'thanhnien.vn' => ['name' => 'Thanh Ni√™n', 'icon' => 'fas fa-newspaper', 'color' => 'text-blue-600'],
            'zingnews.vn' => ['name' => 'Zing News', 'icon' => 'fas fa-newspaper', 'color' => 'text-purple-600'],
            'shopee.vn' => ['name' => 'Shopee', 'icon' => 'fas fa-shopping-cart', 'color' => 'text-orange-500'],
            'lazada.vn' => ['name' => 'Lazada', 'icon' => 'fas fa-shopping-cart', 'color' => 'text-blue-800'],
            'tiki.vn' => ['name' => 'Tiki', 'icon' => 'fas fa-shopping-cart', 'color' => 'text-blue-500'],
        ];

        foreach ($results as &$result) {
            $url = $result['link'] ?? '';
            $domain = parse_url($url, PHP_URL_HOST);
            $domain = $domain ? str_replace('www.', '', strtolower($domain)) : 'unknown';

            if (isset($platforms[$domain])) {
                $result['platform'] = $platforms[$domain]['name'];
                $result['platform_icon'] = $platforms[$domain]['icon'];
                $result['platform_color'] = $platforms[$domain]['color'];
            } else {
                $result['platform'] = ucfirst(str_replace(['.com', '.vn', '.org', '.net'], '', $domain));
                $result['platform_icon'] = 'fas fa-globe';
                $result['platform_color'] = 'text-gray-500';
            }

            $result['thumbnail'] = $result['pagemap']['cse_thumbnail'][0]['src'] ?? ($result['pagemap']['cse_image'][0]['src'] ?? null);

            $result['sentiment'] = $this->evaluateContent($result['link'], $result['snippet'] ?? '');
        }


        $selectedPlatform = $request->input('platform'); // L·∫•y gi√° tr·ªã n·ªÅn t·∫£ng t·ª´ query string

        foreach ($results as &$result) {
            $url = $result['link'] ?? '';
            $domain = parse_url($url, PHP_URL_HOST);
            $domain = $domain ? str_replace('www.', '', strtolower($domain)) : 'unknown';

            if (isset($platforms[$domain])) {
                $result['platform'] = $platforms[$domain]['name'];
                $result['platform_icon'] = $platforms[$domain]['icon'];
                $result['platform_color'] = $platforms[$domain]['color'];
            } else {
                $result['platform'] = ucfirst(str_replace(['.com', '.vn', '.org', '.net'], '', $domain));
                $result['platform_icon'] = 'fas fa-globe';
                $result['platform_color'] = 'text-gray-500';
            }

            $result['thumbnail'] = $result['pagemap']['cse_thumbnail'][0]['src'] ?? ($result['pagemap']['cse_image'][0]['src'] ?? null);
            $result['sentiment'] = $this->evaluateContent($result['link'], $result['snippet'] ?? '');
        }

        // üü° L·ªçc theo n·ªÅn t·∫£ng n·∫øu c√≥ y√™u c·∫ßu
        if ($selectedPlatform) {
            $results = array_filter($results, function ($result) use ($selectedPlatform) {
                return strtolower($result['platform']) === strtolower($selectedPlatform);
            });
        }


        $results = array_values($results); // Reset ch·ªâ m·ª•c sau khi l·ªçc
        $totalFiltered = count($results);

        $paginator = new LengthAwarePaginator(
            $results,
            $totalFiltered,
            $perPage,
            $page,
            ['path' => $request->url(), 'query' => $request->query()]
        );


        return view('User.search.index', compact('results', 'query', 'paginator'));
    }

    /**
     * H√†m ƒë√°nh gi√° n·ªôi dung trang web b·∫±ng Gemini API
     */
    private function evaluateContent($url, $snippet)
    {
        try {
            // L·∫•y n·ªôi dung t·ª´ URL
            $response = Http::get($url);
            if (!$response->ok()) {
                Log::warning('Kh√¥ng th·ªÉ truy c·∫≠p URL: ' . $url);
                return 'Kh√¥ng th·ªÉ truy c·∫≠p trang web';
            }

            // X√°c ƒë·ªãnh m√£ h√≥a t·ª´ header ho·∫∑c m·∫∑c ƒë·ªãnh l√† UTF-8
            $encoding = 'UTF-8';
            $contentType = $response->header('Content-Type');
            if ($contentType && preg_match('/charset=([\w-]+)/i', $contentType, $matches)) {
                $encoding = strtoupper($matches[1]);
            }

            // L·∫•y n·ªôi dung v√† chuy·ªÉn ƒë·ªïi m√£ h√≥a
            $content = $response->body();

            // Chuy·ªÉn m√£ h√≥a
            $content = @mb_convert_encoding($content, 'UTF-8', 'auto');

            // Lo·∫°i b·ªè th·∫ª HTML
            $content = strip_tags($content);

            // Lo·∫°i k√Ω t·ª± kh√¥ng h·ª£p l·ªá
            $content = preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $content);

            // L√†m s·∫°ch k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ ho·∫∑c s·ªë
            $content = preg_replace('/[^\p{L}\p{N}\s]/u', '', $content);

            // C·∫Øt ng·∫Øn n·ªôi dung
            $content = trim(mb_substr($content, 0, 1000));


            // N·∫øu n·ªôi dung r·ªóng, s·ª≠ d·ª•ng snippet
            if (empty($content)) {
                $content = $snippet;
                Log::warning('N·ªôi dung r·ªóng, s·ª≠ d·ª•ng snippet cho URL: ' . $url);
            }

            // Log n·ªôi dung ƒë·ªÉ ki·ªÉm tra
            Log::info('N·ªôi dung sau khi l√†m s·∫°ch cho URL: ' . $url, ['content' => $content]);

            // Ki·ªÉm tra n·ªôi dung r·ªóng
            if (empty($content)) {
                Log::warning('N·ªôi dung r·ªóng sau khi l√†m s·∫°ch: ' . $url);
                return 'Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ƒë√°nh gi√°';
            }

            // G·ªçi Gemini API
            $geminiApiKey = env('GEMINI_API_KEY', 'AIzaSyDhb0kguqfFXdsknNviCU7dLI6NeCQS8hs');
            $geminiEndpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

            $prompt = "Ph√¢n t√≠ch n·ªôi dung sau v√† ƒë√°nh gi√° xem n·ªôi dung c√≥ t√≠ch c·ª±c (T·ªët), ti√™u c·ª±c (X·∫•u), hay trung t√≠nh (Trung t√≠nh). \n\n" .
                "- N·ªôi dung ƒë∆∞·ª£c coi l√† 'T·ªët' n·∫øu: \n" .
                "  - Cung c·∫•p th√¥ng tin h·ªØu √≠ch, ƒë√°ng tin c·∫≠y v·ªÅ s·∫£n ph·∫©m, d·ªãch v·ª•, ho·∫∑c c√¥ng ty.\n" .
                "  - Ch·ª©a t·ª´ ng·ªØ t√≠ch c·ª±c nh∆∞ 'ch·∫•t l∆∞·ª£ng cao', 'uy t√≠n', 'ƒë√°ng tin c·∫≠y', ho·∫∑c ƒë√°nh gi√° t·ªët.\n" .
                "  - Qu·∫£ng b√° s·∫£n ph·∫©m/d·ªãch v·ª• m·ªôt c√°ch ch√¢n th·ª±c, kh√¥ng c√≥ d·∫•u hi·ªáu l·ª´a ƒë·∫£o.\n\n" .
                "- N·ªôi dung ƒë∆∞·ª£c coi l√† 'X·∫•u' n·∫øu: \n" .
                "  - Ch·ª©a th√¥ng tin sai l·ªách, l·ª´a ƒë·∫£o, ho·∫∑c g√¢y hi·ªÉu l·∫ßm.\n" .
                "  - C√≥ t·ª´ ng·ªØ ti√™u c·ª±c nh∆∞ 'k√©m ch·∫•t l∆∞·ª£ng', 'l·ª´a ƒë·∫£o', 'ph√†n n√†n', ho·∫∑c ƒë√°nh gi√° x·∫•u.\n" .
                "  - N·ªôi dung k√≠ch ƒë·ªông, x√∫c ph·∫°m, ho·∫∑c kh√¥ng ph√π h·ª£p.\n\n" .
                "- N·ªôi dung ƒë∆∞·ª£c coi l√† 'Trung t√≠nh' n·∫øu: \n" .
                "  - Ch·ªâ cung c·∫•p th√¥ng tin th·ª±c t·∫ø, kh√¥ng c√≥ c·∫£m x√∫c t√≠ch c·ª±c ho·∫∑c ti√™u c·ª±c r√µ r√†ng (v√≠ d·ª•: th√¥ng tin l·ªãch s·ª≠, s·ªë li·ªáu, ho·∫∑c m√¥ t·∫£ k·ªπ thu·∫≠t).\n" .
                "  - Kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë√°nh gi√° l√† T·ªët ho·∫∑c X·∫•u.\n\n" .
                "Tr·∫£ v·ªÅ m·ªôt c√¢u ng·∫Øn g·ªçn ch·ªâ v·ªõi k·∫øt qu·∫£: 'T·ªët', 'X·∫•u', ho·∫∑c 'Trung t√≠nh'. N·ªôi dung: \n\n" . $content;

            // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API
            $response = Http::withHeaders([
                'Content-Type' => 'application/json',
            ])->post($geminiEndpoint . '?key=' . $geminiApiKey, [
                'contents' => [
                    [
                        'parts' => [
                            ['text' => $prompt]
                        ]
                    ]
                ]
            ]);

            if ($response->ok()) {
                $result = $response->json()['candidates'][0]['content']['parts'][0]['text'] ?? 'Kh√¥ng x√°c ƒë·ªãnh';
                Log::info('K·∫øt qu·∫£ t·ª´ Gemini cho URL: ' . $url, ['result' => $result]);
                return $result;
            } else {
                Log::error('L·ªói khi g·ªçi Gemini API cho URL: ' . $url, ['status' => $response->status()]);
                return 'L·ªói khi g·ªçi Gemini API: ' . $response->status();
            }
        } catch (\Exception $e) {
            Log::error('L·ªói x·ª≠ l√Ω URL: ' . $url, ['error' => $e->getMessage()]);
            return 'L·ªói: ' . $e->getMessage();
        }
    }
}
